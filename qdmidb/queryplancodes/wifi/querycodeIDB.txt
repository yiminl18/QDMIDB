SeqScan s1users= new SeqScan(tid, WiFiusers.getId(), "users");
Impute imp1users = new Impute(new Attribute("users.ugroup"),s1users);
Impute imp2users = new Impute(new Attribute("users.mac"),imp1users);
SmartFilter sel1users = new SmartFilter(new Predicate("users.ugroup", Predicate.Op.EQUALS, new IntField(2)), imp2users);
SeqScan s2wifi= new SeqScan(tid, WiFiwifi.getId(), "wifi");
Impute imp3wifi = new Impute(new Attribute("wifi.lid"),s2wifi);
SmartFilter sel2wifi = new SmartFilter(new Predicate("wifi.st", Predicate.Op.GREATER_THAN, new IntField(800)), imp3wifi);
SmartFilter sel3wifi = new SmartFilter(new Predicate("wifi.et", Predicate.Op.LESS_THAN, new IntField(2000)), sel2wifi);
JoinPredicate predName1 = new JoinPredicate("users.mac", Predicate.Op.EQUALS, "wifi.mac");
SmartJoin join1users = new SmartJoin(predName1, sel1users, sel3wifi);
SeqScan s3occupancy= new SeqScan(tid, WiFioccupancy.getId(), "occupancy");
JoinPredicate predName2 = new JoinPredicate("wifi.lid", Predicate.Op.EQUALS, "occupancy.lid");
SmartJoin join2wifi = new SmartJoin(predName2, join1users, s3occupancy);
Impute imp4occupancy = new Impute(new Attribute("occupancy.type"),join2wifi);
Impute imp5occupancy = new Impute(new Attribute("occupancy.occupancy"),imp4occupancy);
List<Attribute> attributes = new ArrayList<>();
attributes.add(new Attribute("occupancy.type"));
attributes.add(new Attribute("occupancy.occupancy"));
Type[] types = new Type[]{Type.INT_TYPE,Type.INT_TYPE};
SmartProject sp1 = new SmartProject(attributes, types, imp5occupancy);
SmartAggregate sp = new SmartAggregate(sp1, "occupancy.occupancy", "occupancy.type", Aggregator.Op.MAX);
return sp;