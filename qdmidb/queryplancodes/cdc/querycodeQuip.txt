SeqScan s1exams= new SeqScan(tid, CDCexams.getId(), "exams");
SmartFilter sel1exams = new SmartFilter(new Predicate("exams.waist_circumference", Predicate.Op.LESS_THAN_OR_EQ, new IntField(5000)), s1exams);
SeqScan s2labs= new SeqScan(tid, CDClabs.getId(), "labs");
SmartFilter sel2labs = new SmartFilter(new Predicate("labs.albumin", Predicate.Op.GREATER_THAN_OR_EQ, new IntField(2000)), s2labs);
JoinPredicate predName1 = new JoinPredicate("exams.id", Predicate.Op.EQUALS, "labs.id");
SmartJoin join1exams = new SmartJoin(predName1, sel1exams, sel2labs);
SeqScan s3demo= new SeqScan(tid, CDCdemo.getId(), "demo");
JoinPredicate predName2 = new JoinPredicate("exams.id", Predicate.Op.EQUALS, "demo.id");
SmartJoin join2exams = new SmartJoin(predName2, join1exams, s3demo);
List<Attribute> attributes = new ArrayList<>();
attributes.add(new Attribute("demo.gender"));
attributes.add(new Attribute("labs.triglyceride"));
Type[] types = new Type[]{Type.INT_TYPE,Type.INT_TYPE};
SmartProject sp1 = new SmartProject(attributes, types, join2exams);
SmartAggregate sp = new SmartAggregate(sp1, "labs.triglyceride", "demo.gender", Aggregator.Op.AVG);
return sp;