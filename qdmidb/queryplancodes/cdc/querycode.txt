SeqScan s1exams= new SeqScan(tid, CDCexams.getId(), "exams");
Impute imp1exams = new Impute(new Attribute("exams.head_circumference"),s1exams);
SeqScan s2labs= new SeqScan(tid, CDClabs.getId(), "labs");
Impute imp2labs = new Impute(new Attribute("labs.triglyceride"),s2labs);
SmartFilter sel1labs = new SmartFilter(new Predicate("labs.triglyceride", Predicate.Op.GREATER_THAN_OR_EQ, new IntField(300)), imp2labs);
JoinPredicate predName1 = new JoinPredicate("exams.id", Predicate.Op.EQUALS, "labs.id");
SmartJoin join1exams = new SmartJoin(predName1, imp1exams, sel1labs);
SeqScan s3demo= new SeqScan(tid, CDCdemo.getId(), "demo");
Impute imp3demo = new Impute(new Attribute("demo.years_edu"),s3demo);
SmartFilter sel2demo = new SmartFilter(new Predicate("demo.years_edu", Predicate.Op.GREATER_THAN_OR_EQ, new IntField(5)), imp3demo);
JoinPredicate predName2 = new JoinPredicate("exams.id", Predicate.Op.EQUALS, "demo.id");
SmartJoin join2exams = new SmartJoin(predName2, join1exams, sel2demo);
List<Attribute> attributes = new ArrayList<>();
attributes.add(new Attribute("exams.head_circumference"));
Type[] types = new Type[]{Type.INT_TYPE};
SmartProject sp1 = new SmartProject(attributes, types, join2exams);
SmartAggregate sp = new SmartAggregate(sp1, "exams.head_circumference", "", Aggregator.Op.MIN);
return sp;