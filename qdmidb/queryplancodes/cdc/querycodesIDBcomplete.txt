Q6
SeqScan s1exams= new SeqScan(tid, CDCexams.getId(), "exams");
Impute imp1exams = new Impute(new Attribute("exams.weight"),s1exams);
SmartFilter sel1exams = new SmartFilter(new Predicate("exams.weight", Predicate.Op.LESS_THAN_OR_EQ, new IntField(5000)), imp1exams);
SeqScan s2labs= new SeqScan(tid, CDClabs.getId(), "labs");
Impute imp2labs = new Impute(new Attribute("labs.blood_lead"),s2labs);
SmartFilter sel2labs = new SmartFilter(new Predicate("labs.blood_lead", Predicate.Op.GREATER_THAN_OR_EQ, new IntField(100)), imp2labs);
JoinPredicate predName1 = new JoinPredicate("exams.id", Predicate.Op.EQUALS, "labs.id");
SmartJoin join1exams = new SmartJoin(predName1, sel1exams, sel2labs);
SeqScan s3demo= new SeqScan(tid, CDCdemo.getId(), "demo");
Impute imp3demo = new Impute(new Attribute("demo.income"),s3demo);
JoinPredicate predName2 = new JoinPredicate("exams.id", Predicate.Op.EQUALS, "demo.id");
SmartJoin join2exams = new SmartJoin(predName2, join1exams, imp3demo);
List<Attribute> attributes = new ArrayList<>();
attributes.add(new Attribute("demo.income"));
Type[] types = new Type[]{Type.INT_TYPE};
SmartProject sp1 = new SmartProject(attributes, types, join2exams);
SmartAggregate sp = new SmartAggregate(sp1, "demo.income", "", Aggregator.Op.MAX);
return sp;