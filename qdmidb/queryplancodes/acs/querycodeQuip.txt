SeqScan s1t1= new SeqScan(tid, ACSt1.getId(), "t1");
SmartFilter sel1t1 = new SmartFilter(new Predicate("t1.c6", Predicate.Op.LESS_THAN_OR_EQ, new IntField(6000)), s1t1);
SeqScan s2t2= new SeqScan(tid, ACSt2.getId(), "t2");
JoinPredicate predName1 = new JoinPredicate("t1.c9", Predicate.Op.EQUALS, "t2.c9");
SmartJoin join1t1 = new SmartJoin(predName1, sel1t1, s2t2);
SeqScan s3t0= new SeqScan(tid, ACSt0.getId(), "t0");
JoinPredicate predName2 = new JoinPredicate("t1.c0", Predicate.Op.EQUALS, "t0.c0");
SmartJoin join2t1 = new SmartJoin(predName2, join1t1, s3t0);
SeqScan s4t3= new SeqScan(tid, ACSt3.getId(), "t3");
SmartFilter sel2t3 = new SmartFilter(new Predicate("t3.c21", Predicate.Op.GREATER_THAN_OR_EQ, new IntField(5500)), s4t3);
JoinPredicate predName3 = new JoinPredicate("t2.c15", Predicate.Op.EQUALS, "t3.c15");
SmartJoin join3t2 = new SmartJoin(predName3, join2t1, sel2t3);
List<Attribute> attributes = new ArrayList<>();
attributes.add(new Attribute("t2.c11"));
Type[] types = new Type[]{Type.INT_TYPE};
SmartProject sp1 = new SmartProject(attributes, types, join3t2);
SmartAggregate sp = new SmartAggregate(sp1, "t2.c11", "", Aggregator.Op.MIN);
return sp;