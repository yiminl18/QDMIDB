SeqScan s1t0= new SeqScan(tid, ACSt0.getId(), "t0");
SmartFilter sel1t0 = new SmartFilter(new Predicate("t0.c4", Predicate.Op.GREATER_THAN_OR_EQ, new IntField(3500)), s1t0);
SeqScan s2t1= new SeqScan(tid, ACSt1.getId(), "t1");
SmartFilter sel2t1 = new SmartFilter(new Predicate("t1.c6", Predicate.Op.LESS_THAN_OR_EQ, new IntField(2000)), s2t1);
JoinPredicate predName1 = new JoinPredicate("t0.c0", Predicate.Op.EQUALS, "t1.c0");
SmartJoin join1t0 = new SmartJoin(predName1, sel1t0, sel2t1);
SeqScan s3t2= new SeqScan(tid, ACSt2.getId(), "t2");
JoinPredicate predName2 = new JoinPredicate("t1.c9", Predicate.Op.EQUALS, "t2.c9");
SmartJoin join2t1 = new SmartJoin(predName2, join1t0, s3t2);
List<Attribute> attributes = new ArrayList<>();
attributes.add(new Attribute("t0.c1"));
Type[] types = new Type[]{Type.INT_TYPE};
SmartProject sp1 = new SmartProject(attributes, types, join2t1);
SmartAggregate sp = new SmartAggregate(sp1, "t0.c1", "", Aggregator.Op.MIN);
return sp;